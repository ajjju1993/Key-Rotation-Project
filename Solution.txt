1.

CREATE TABLE station (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    state VARCHAR(2) NOT NULL
);

CREATE TABLE weather (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    station_id INTEGER NOT NULL REFERENCES station(id),
    max_temp NUMERIC(5, 2),
    min_temp NUMERIC(5, 2),
    precipitation NUMERIC(5, 2)
);


2.

import os
import psycopg2
from datetime import datetime

# PostgreSQL configuration
DATABASE_URL = os.environ['DATABASE_URL']

# Weather data directory
WEATHER_DATA_DIR = 'wx_data'

# Connect to the database
conn = psycopg2.connect(DATABASE_URL)
cur = conn.cursor()

# Iterate over each file in the weather data directory
for filename in os.listdir(WEATHER_DATA_DIR):
    filepath = os.path.join(WEATHER_DATA_DIR, filename)
    with open(filepath) as f:
        for line in f:
            # Parse the line
            parts = line.strip().split('\t')
            date_str, max_temp_str, min_temp_str, precip_str = parts
            date = datetime.strptime(date_str, '%Y%m%d').date()
            max_temp = float(max_temp_str) / 10.0 if max_temp_str != '-9999' else None
            min_temp = float(min_temp_str) / 10.0 if min_temp_str != '-9999' else None
            precip = float(precip_str) / 10.0 if precip_str != '-9999' else None

            # Check for duplicates
            cur.execute("""
                SELECT id FROM weather
                WHERE date = %s AND station_id = %s
            """, (date, station_id))
            existing_row = cur.fetchone()
            if existing_row is not None:
                continue

            # Insert the weather record into the database
            cur.execute("""
                INSERT INTO weather (date, station_id, max_temp, min_temp, precipitation)
                VALUES (%s, %s, %s, %s, %s)
            """, (date, station_id, max_temp, min_temp, precip))

# Commit the transaction
conn.commit()

# Print a message indicating how many records were ingested
cur.execute("""
    SELECT COUNT(*) FROM weather
""")
num_records = cur.fetchone()[0]
print(f"Ingested {num_records} weather records")


3.

INSERT INTO weather_stats (year, station_id, avg_max_temp, avg_min_temp, total_precip)
SELECT strftime('%Y', date) AS year, station_id,
       AVG(CASE WHEN max_temp <> -9999 THEN max_temp / 10.0 ELSE NULL END) AS avg_max_temp,
       AVG(CASE WHEN min_temp <> -9999 THEN min_temp / 10.0 ELSE NULL END) AS avg_min_temp,
       SUM(CASE WHEN precip <> -9999 THEN precip / 10.0 ELSE NULL END) / 10.0 AS total_precip
FROM weather_data
GROUP BY year, station_id;


class WeatherStats(Base):
    _tablename_ = "weather_stats"

    id = Column(Integer, primary_key=True)
    year = Column(Integer)
    station_id = Column(String(10))
    avg_max_temp = Column(Float)
    avg_min_temp = Column(Float)
    total_precip = Column(Float)


def calculate_weather_stats(session):
    query = """
        INSERT INTO weather_stats (year, station_id, avg_max_temp, avg_min_temp, total_precip)
        SELECT strftime('%Y', date) AS year, station_id,
               AVG(CASE WHEN max_temp <> -9999 THEN max_temp / 10.0 ELSE NULL END) AS avg_max_temp,
               AVG(CASE WHEN min_temp <> -9999 THEN min_temp / 10.0 ELSE NULL END) AS avg_min_temp,
               SUM(CASE WHEN precip <> -9999 THEN precip / 10.0 ELSE NULL END) / 10.0 AS total_precip
        FROM weather_data
        GROUP BY year, station_id;
    """
    session.execute(query)
    session.commit()


4.


from flask import Flask, jsonify, request
from flask_sqlalchemy import SQLAlchemy
from flask_marshmallow import Marshmallow
from flask_restful import Api, Resource, reqparse
from sqlalchemy import func
import datetime

app = Flask(_name_)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///weather.db'
db = SQLAlchemy(app)
ma = Marshmallow(app)
api = Api(app)

class Weather(db.Model):
    _tablename_ = 'weather'
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    station_id = db.Column(db.Integer, nullable=False)
    max_temp = db.Column(db.Float, nullable=False)
    min_temp = db.Column(db.Float, nullable=False)
    precipitation = db.Column(db.Float, nullable=False)

class WeatherSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = Weather
        include_fk = True

class WeatherResource(Resource):
    def get(self):
        parser = reqparse.RequestParser()
        parser.add_argument('station_id', type=int)
        parser.add_argument('start_date', type=str)
        parser.add_argument('end_date', type=str)
        parser.add_argument('page', type=int)
        parser.add_argument('per_page', type=int)
        args = parser.parse_args()
        
        start_date = datetime.datetime.strptime(args.get('start_date', '1985-01-01'), '%Y-%m-%d').date()
        end_date = datetime.datetime.strptime(args.get('end_date', '2014-12-31'), '%Y-%m-%d').date()
        
        query = Weather.query.filter(Weather.date.between(start_date, end_date))
        
        if args['station_id']:
            query = query.filter_by(station_id=args['station_id'])
        
        page = args.get('page', 1)
        per_page = args.get('per_page', 10)
        pagination = query.paginate(page, per_page, error_out=False)
        
        result = {
            'items': WeatherSchema(many=True).dump(pagination.items),
            'total': pagination.total,
            'pages': pagination.pages,
            'current_page': pagination.page
        }
        return jsonify(result)

api.add_resource(WeatherResource,Â '/api/weather')